1.Write a python program to calculate the number of lowercase and uppercase letters in a string.
code:-
def string_test(s):
    d={"UPPER_CASE":0, "LOWER_CASE":0}
    for c in s:
        if c.isupper():
           d["UPPER_CASE"]+=1
        elif c.islower():
           d["LOWER_CASE"]+=1
        else:
           pass
    print ("String is: ", s)
    print ("No. of Upper case letters : ", d["UPPER_CASE"])
    print ("No. of Lower case letters : ", d["LOWER_CASE"])

string_test('Preethi Nayak')


2.We are given 3 strings: str1, str2, and str3. Str3 is said to be a shuffle of str1 and str2 if it
can be formed by interleaving the characters of str1 and str2 in a way that maintains the left
to right ordering of the characters from each string. For example, given str1=&quot;abc&quot; and
str2=&quot;def&quot;, str3=&quot;dabecf&quot; is a valid shuffle since it preserves the character ordering of the two
strings. So, given these 3 strings write a function that detects whether str3 is a valid shuffle
of str1 and str2.
code:-
public class Main{
static boolean isInterleaved (String A, String B, String C)
{
int i = 0, j = 0, k = 0;
while (k != C.length())
{
if (i<A.length()&&A.charAt(i) == C.charAt(k))
i++;
else if (j<B.length()&&B.charAt(j) == C.charAt(k))
j++;
else
return false;
k++;
}
if (i<A.length() || j<B.length())
return false;
return true;
}
public static void main(String []args){
String A = "abc";
String B = "def";
String C = "dabecf";
if (isInterleaved(A, B, C) == true)
System.out.printf("%s is interleaved of %s and %s", C, A, B);
else
System.out.printf("%s is not interleaved of %s and %s", C, A, B);
}
}


3.Write a Java Program to check whether the given number is Armstrong number or not.
code:-
public class Main {

    public static void main(String[] args) {

        int num = 370, number, temp, total = 0;

        number = num;
        while (number != 0)
        {
            temp = number % 10;
            total = total + temp*temp*temp;
            number /= 10;
        }
        if(total == num)
            System.out.println(num + " is an Armstrong number");
        else
            System.out.println(num + " is not an Armstrong number");
    }
}


4.Write a c program to solve a system of linear congruences by applying the Chinese Remainder Theorem.
code:-
#include<stdio.h>
int mul_inv(int a, int b)
{
int b0 = b, t, q;
int x0 = 0, x1 = 1;
if (b == 1) return 1;
while (a>1) {
q = a / b;
t = b, b = a % b, a = t;
t = x0, x0 = x1 - q * x0, x1 = t;
}
if (x1<0) x1 += b0;
return x1;
}

int chinese_remainder(int *n, int *a, int len)
{
int p, i, prod = 1, sum = 0;

for (i = 0; i<len; i++) prod *= n[i];

for (i = 0; i<len; i++) {
p = prod / n[i];

sum += a[i] * mul_inv(p, n[i]) * p;
}

return sum % prod;
}

int main(void)
{
int n[] = { 3, 5, 7 };
int a[] = { 2, 3, 2 };

printf("%d\n", chinese_remainder(n, a, sizeof(n)/sizeof(n[0])));
return 0;
}


5.Write a Java Program to find longest substring without repeating characters in a string.
code:-
import java.util.LinkedHashMap;
public class Main
{ 
    static void longestSubstring(String inputString)
    {
    char[] charArray = inputString.toCharArray();

    String longestSubstring = null;

    int longestSubstringLength = 0;

    LinkedHashMap<Character, Integer> charPosMap = new LinkedHashMap<Character, Integer>();

    for (int i = 0; i < charArray.length; i++)

    {

        char ch = charArray[i];

          if(!charPosMap.containsKey(ch))

             {

                 charPosMap.put(ch, i);

             }

            else

             {             

                  i = charPosMap.get(ch);

                   charPosMap.clear();

              }
              if(charPosMap.size() > longestSubstringLength)
             {

                longestSubstringLength = charPosMap.size();

                longestSubstring = charPosMap.keySet().toString();

               }

                }

                 System.out.println("Input String : "+inputString);

                 System.out.println("The longest substring : "+longestSubstring);

                  System.out.println("The longest Substring Length : "+longestSubstringLength);

               }

                public static void main(String[] args)

               {             

                 longestSubstring("PreethiNayak");

               }             

}
